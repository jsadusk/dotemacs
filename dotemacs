;-*- lisp -*-
; package management - use straight.el and use-package
(let ((home-dir (getenv "HOME")))
  (dolist (newpath '("~/.local/bin" "~/.cargo/bin/rust-analyzer" "~/bin" "~/.cargo/bin/" "/usr/local/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":" (string-replace "~" home-dir newpath)))
  (setq exec-path (append exec-path '(newpath)))
  ))

(package-initialize)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-always-ensure t)
(use-package straight
  :custom
  ;; add project and flymake to the pseudo-packages variable so straight.el doesn't download a separate version than what eglot downloads.
  (straight-built-in-pseudo-packages '(emacs eglot nadvice python image-mode project flymake xref))
  (straight-use-package-by-default t))

(use-package gcmh
    :config
  (gcmh-mode 1))

; require things that aren't in use package
(require 'generic-x)
(require 'notifications)
(require 'subr-x)

; configure tramp
(require 'tramp)
(setq tramp-verbose 0)
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto")
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
(setq tramp-backup-directory-alist nil)
(setq tramp-auto-save-directory "~/.emacs.d/tramp-autosave")
;; Check whether this speeds up dev env
(setq vc-handled-backends '())
(setq vc-ignore-dir-regexp ".+")
(setq remote-file-name-inhibit-locks t)
(setq vc-follow-symlinks t)

(require 'compile)

(setq custom-file (concat user-emacs-directory "custom.el"))

(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
(add-to-list 'major-mode-remap-alist '(cmake-mode . cmake-ts-mode))
(add-to-list 'major-mode-remap-alist '(bash-mode . bash-ts-mode))
;(add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
;(add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
(add-to-list 'major-mode-remap-alist '(java-mode . java-ts-mode))
(add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode))
(add-to-list 'major-mode-remap-alist '(js-mode . js-ts-mode))
(add-to-list 'major-mode-remap-alist '(toml-mode . toml-ts-mode))
(add-to-list 'major-mode-remap-alist '(js-json-mode . json-ts-mode))
(add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode))

(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  ;(treesit-auto-install-all)
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package org
  :init
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  )
(use-package dockerfile-mode)
(use-package org-roam
  :init
  (if (not (file-exists-p "~/roam"))
      (progn 
        (make-directory "~/roam")
        (make-directory "~/roam/journals")
        (make-directory "~/roam/pages")
        )
      )
  (org-roam-db-autosync-mode)
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/roam"))
  (org-roam-dailies-directory "journals/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(
     ("d" "default" plain "%?"
      :target (file+head "pages/${slug}.org"
                     "#+title: ${title}\n")
      :unnarrowed t)
     ("j" "job opportunity" plain
      "\n* Company\n\n-%?\n\n* History\n\n-\n\n* Job Notes\n\n-\n\n* Office\n\n-\n\n* Comp\n\n-\n\n* Next Steps\n\n-\n"
      :target (file+head "pages/job-${slug}.org"
               "#+title: ${title}\n")
      :unnarrowed t)
     ))
  :bind
  (;("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   :map org-mode-map
   ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup)
  )
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n f" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))

(use-package eat)

(use-package bui)
(use-package posframe)
(use-package vertico
     :init
     (vertico-mode))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package consult
    :bind
  (
   ("C-s" . consult-line)
   ("C-x b" . consult-buffer)
   ("M-g" . consult-goto-line)
   ("M-y" . consult-yank-from-kill-ring)
   ))

(use-package marginalia
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
(use-package all-the-icons-completion
  :init
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

(use-package savehist
  :init
  (savehist-mode))
(use-package clang-format)
(use-package magit)
(use-package yasnippet)
(use-package projectile)
(use-package corfu

  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match t)      ;; Quit if there's no match
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-scroll-margin 5)        ;; Use scroll margin

  :config
  (global-corfu-mode)
  )
(use-package cargo)
(use-package cmake-mode)
(use-package toml-mode)
(use-package yaml-mode)
(use-package markdown-mode)
(use-package lv)
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t))

(defun enable-eglot-flymake-checkers ()
  (interactive)
  (cond ((derived-mode-p 'python-base-mode)
         ;(flymake-ruff-load)
                                        ;(flymake-mypy-enable)
         (flymake-collection-hook-setup)
         (add-hook 'flymake-diagnostic-functions 'python-flymake nil t))
        (t nil)))

(use-package flymake-collection
    :hook
  (after-init . flymake-collection-hook-setup))

(use-package eglot
   :bind
 (("C-." . eglot-code-actions))

 :config
 (add-to-list 'eglot-server-programs
              `((c++-mode) ,"clangd"))
  (add-to-list 'eglot-server-programs
               `((rust-ts-mode) ,"rust-analyzer"))
  (add-to-list 'eglot-server-programs
               `((python-ts-mode) ,"jedi-language-server"))
  (add-to-list 'eglot-stay-out-of 'flymake)
  (add-hook 'flymake-diagnostic-functions 'eglot-flymake-backend)
  (add-hook 'flymake-diagnostic-functions 'flymake-collection-mypy)

  ; seems to avoid a bug and speed things up
  (defun eglot--mode-line-format () )

  :hook (
         (python-ts-mode . eglot-ensure)
         (c++-mode . eglot-ensure)
         (rust-ts-mode . eglot-ensure)
         )
  )

(use-package eglot-booster
    :straight (eglot-booster :type git :host github :repo "jdtsmith/eglot-booster")
    :after eglot
    :config (eglot-booster-mode))

(use-package flymake)
;(use-package flymake-ruff)
;(use-package flymake-mypy
;  :straight (flymake-mypy
;             :type git
;             :host github
;             :repo "com4/flymake-mypy")
                                        ;    )

(use-package flymake-popon)
(use-package eldoc-box
    :custom-face
  :hook
  (
   (python-ts-mode . eldoc-box-hover-mode)
   (c++-mode . eldoc-box-hover-mode)
   (rust-ts-mode . eldoc-box-hover-mode)
   )
  )

;(use-package breadcrumb)
(use-package jinja2-mode)
(use-package git-link)
;; (use-package xterm-color
;;     :config
;;   (setq compilation-environment '("TERM=xterm-256color"))
;;   (defun my/advice-compilation-filter (f proc string)
;;     (if (not (string-prefix-p "/usr/bin/rg" (nth 2 (process-command proc))))
;;         (funcall f proc (xterm-color-filter string))
;;         (funcall f proc string)
;; 	)
;;     )
;;   (advice-add 'compilation-filter :around #'my/advice-compilation-filter)
;;   )
(use-package eterm-256color)
(use-package vterm
    :after eterm-256color
    :custom
    (vterm-term-environment-variable "eterm-color")
    (add-to-list 'vterm-eval-cmds '("xp-notify" xp-notify))
    (vterm-max-scrollback 100000)
    )
(use-package multi-vterm)
(use-package scad-mode)
;(use-package forge :after magit)
;(use-package github-review :after forge)
(electric-pair-mode 1)
;(use-package deadgrep)
(use-package rg)
(use-package expand-region
  :bind ("C-M-SPC" . er/expand-region))
(use-package protobuf-mode)

;; Still need to make this work
(use-package dape
  :straight (dape :type git :host github :repo "svaante/dape")
  ;; To use window configuration like gud (gdb-mi)
  :init
  (setq dape-buffer-window-arrangement 'gud)

  :config
  ;; Info buffers to the right
  ;; (setq dape-buffer-window-arrangement 'right)

  ;; To not display info and/or buffers on startup
  ;; (remove-hook 'dape-on-start-hooks 'dape-info)
  ;; (remove-hook 'dape-on-start-hooks 'dape-repl)

  ;; To display info and/or repl buffers on stopped
   (add-hook 'dape-on-stopped-hooks 'dape-info)
   (add-hook 'dape-on-stopped-hooks 'dape-repl)

  ;; By default dape uses gdb keybinding prefix
  ;; If you do not want to use any prefix, set it to nil.
  ;; (setq dape-key-prefix "\C-x\C-a")

  ;; Kill compile buffer on build success
  ;; (add-hook 'dape-compile-compile-hooks 'kill-buffer)

  ;; Save buffers on startup, useful for interpreted languages
  ;; (add-hook 'dape-on-start-hooks
  ;;           (defun dape--save-on-start ()
  ;;             (save-some-buffers t t)))

  ;; Projectile users
  (setq dape-cwd-fn 'projectile-project-root)
  )

(use-package bazel
    :straight (bazel :type git :host github :repo "bazelbuild/emacs-bazel-mode")
    :config
    (defface cargo-error-code
        '((t :foreground "red"))
      "Face for cargo error codes"
      :group 'bazel
      )
    (defface cargo-error-message
        '((t :foreground "yellow"))
      "Face for cargo error messages"
      :group 'bazel
      )
    (defface cargo-error-explaination
        '((t :foreground "green"))
      "Face for cargo error explainations"
      :group 'bazel
      )
    (add-to-list 'compilation-error-regexp-alist '("^\\(error[^:]*\\): \\(.*\\)" nil nil nil 0 nil (1 'cargo-error-code) (2 'cargo-error-message)))
    (add-to-list 'compilation-error-regexp-alist '("^ *--> *\\([^:]*\\):\\([0-9]*\\):\\([0-9]*\\)" 1 2 3))

    )

(use-package smart-mode-line
    :init
  (setq sml/theme 'light)
  (setq sml/no-confirm-load-theme t)
    :config
  (sml/setup)
  )
(use-package coterm
    :config
  (coterm-mode)
  )
(use-package fancy-compilation
    :commands (fancy-compilation-mode))
(with-eval-after-load 'compile
  (fancy-compilation-mode))
; rainbow delimiters is incompatible with tree-sitter for now
;(use-package rainbow-delimiters
;  :init
;  (add-hook 'prog-mode-hook #'rainbow-delimiters-use)
;)
(use-package treemacs)

(use-package elysium
  :custom
  ;; Below are the default values
  (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
  (elysium-window-style 'vertical)) ; Can be customized to horizontal

(use-package gptel
  :config
  (setq
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "localhost:11434"
                   :stream t
                   :models '(codestral:22b))))
(use-package smerge-mode
  :ensure nil
  :hook
  (prog-mode . smerge-mode))

(use-package trunk-io-tree
    :straight (trunk-io-tree :type git :host github :repo "jsadusk/trunk-io-tree")
    )

;; Doesn't seem to eval yet, but interesting for later
;(use-package visual-replace
;    :straight (visual-replace :type git :host github :repo "szermatt/visual-replace")
;    )



; add my library set
(add-to-list 'load-path "~/.emacs.lib")

(require 'smart-split)
(require 'wait-gdb)
(require 'xp-notifications)
(require 'compile-notifications)
(require 'ansi-color-buffer)

; turn on major features 
(yas-global-mode 1)
(server-start)

;(load-file "~/.emacs.lib/org-roam-logseq.el")
(projectile-global-mode)

; basic settings that keep me sane
(add-to-list 'default-frame-alist '(background-color . "black"))
(add-to-list 'default-frame-alist '(foreground-color . "lightgrey"))
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(add-to-list 'default-frame-alist '(font . "Inconsolata-10"))
(setq column-number-mode t)
(setq line-number-mode t)
(setq mouse-yank-at-point t)
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(global-font-lock-mode)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq-default display-buffer-reuse-frames t)
(setq truncate-partial-width-windows nil)
(setq c-basic-offset 4)
(setq tab-width 4)
(show-paren-mode)
(setq show-trailing_whitespace t)
(transient-mark-mode t)
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
(global-so-long-mode)
(pixel-scroll-precision-mode)
(when (eq system-type 'darwin)
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
  (setq mac-option-key-is-meta nil)
  (setq mac-command-key-is-meta t)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier 'super)
  (add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
)

; file associations
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

; Global keybindings
(global-set-key [(control tab)] 'other-window)
(global-set-key [(control meta tab)] 'other-frame)
(global-set-key (kbd "M-s") 'isearch-repeat-forward)
(global-set-key [(control /)] 'projectile-compile-project)
(global-set-key (kbd "C-c p") 'projectile-command-map)
(global-set-key [(control =)] 'copy-region-as-kill)
(global-unset-key [(meta g)])
(global-set-key [(meta g)] 'goto-line)


; Turn off magit features that make me insane
(with-eval-after-load 'magit-mode
  (define-key magit-mode-map [(control tab)] 'other-window))
(setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)

; projectile settings
(setq projectile-sort-order 'recentf)

; C/C++ settings
(defconst my-cc-style
  '("gnu"
    (c-offsets-alist . ((innamespace [0])
			(inextern-lang .[0])
			(arglist-intro . [6])))))
(c-add-style "my-cc-style" my-cc-style)
(add-hook 'c++-mode-hook
	  '(lambda ()
	    (c-set-style "my-cc-style")
	    (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)
            ))

(add-hook 'c--mode-hook
	  '(lambda ()
	    (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)
            (eldoc-box-hover-mode)))

(add-hook 'python-ts-mode-hook
          '(lambda()
            (setq python-indent-offset 4)
            (eldoc-box-hover-mode)))

; clang format
(require 'clang-format)
(global-set-key (kbd "C-c i") 'clang-format-region)
(global-set-key (kbd "C-c u") 'clang-format-buffer)

(setq clang-format-executable "clang-format")
(defun clang-format-before-save ()
  "Add this to .emacs to clang-format on save
 (add-hook 'before-save-hook 'clang-format-before-save)."
 
 
  (interactive)
  (when (eq major-mode 'c++-mode) (clang-format-buffer)))
 
 
; Install hook to use clang-format on save
;(add-hook 'before-save-hook 'clang-format-before-save)

;; (defun projectile-proj-find-function (dir)
;;   (let ((root (projectile-project-root dir)))
;;     (and root (cons 'transient root))))

;; (with-eval-after-load 'project
;;   (add-to-list 'project-find-functions
;;                'projectile-proj-find-function))

(setq rust-format-on-save t)
;(setq rustic-lsp-client 'eglot)

; compilation-mode tweaks
(compile-notifications)
;(setq compilation-environment '("TERM=eterm-color"))
;(defun my/advice-compilation-filter (f proc string)
;  (funcall f proc (xterm-color-filter string)))
;(advice-add 'compilation-filter :around #'my/advice-compilation-filter)
;(setq xterm-color-use-bold-for-bright t)


; load local environment
(if (file-exists-p "~/.emacs.local")
    (add-to-list 'load-path "~/.emacs.local"))

(if (file-exists-p "~/.emacs.local/local-init.el")
     (load-file "~/.emacs.local/local-init.el"))
(if (file-exists-p "~/.emacs.local/local-init.el")
     (local-init))

; split all the frames
(dolist (this-frame (frame-list))
  (select-frame this-frame)
  (smart-split))

