;-*- lisp -*-
; package management - use straight.el and use-package
(setq gc-cons-threshold (* 1000 1024 1024))
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold (* 100 1024 1024))))

(dolist (newpath '("~/.local/bin" "~/.cargo/bin/rust-analyzer" "~/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":" newpath))
  (setq exec-path (append exec-path '(newpath)))
  )

(package-initialize)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-always-ensure t)

(setenv "PYTHONPATH" (shell-command-to-string "python3 -c 'import sys; print(\".\" + \":\".join(sys.path))'"))

; hack to make emacs 29 work
(defun native-comp-available-p () nil)

; configure tramp
(require 'tramp)
;(setq tramp-verbose 6)
(setq tramp-use-ssh-controlmaster-options t)
(setq tramp-auto-save-directory "~/.emacs.d/tramp-autosave")
;(setq vc-handled-backends '(Git))
(setq remote-file-name-inhibit-locks t)

(use-package org
  :init
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  )
(use-package org-roam
  :init
  (if (not (file-exists-p "~/roam"))
      (progn 
        (make-directory "~/roam")
        (make-directory "~/roam/journals")
        (make-directory "~/roam/pages")
        )
      )
  (org-roam-db-autosync-mode)
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/roam"))
  (org-roam-dailies-directory "journals/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(
     ("d" "default" plain "%?"
      :target (file+head "pages/${slug}.org"
                     "#+title: ${title}\n")
      :unnarrowed t)
     ("j" "job opportunity" plain
      "\n* Company\n\n-%?\n\n* History\n\n-\n\n* Job Notes\n\n-\n\n* Office\n\n-\n\n* Comp\n\n-\n\n* Next Steps\n\n-\n"
      :target (file+head "pages/job-${slug}.org"
               "#+title: ${title}\n")
      :unnarrowed t)
     ))
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   :map org-mode-map
   ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup)
  )

(use-package project)
(use-package bui)
(use-package posframe)
(use-package vertico
     :init
     (vertico-mode))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package consult
    :bind
  (
   ("C-s" . consult-line)
   ("C-x b" . consult-buffer)
   ("M-g" . consult-goto-line)
   ("M-y" . consult-yank-from-kill-ring)
   ))

(use-package marginalia
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))
(use-package all-the-icons-completion
  :init
  (all-the-icons-completion-mode)
  (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))

(use-package savehist
  :init
  (savehist-mode))

(use-package clang-format)
(use-package magit)
(use-package yasnippet)
(use-package projectile)
(use-package corfu

  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match t)      ;; Quit if there's no match
  ;;(corfu-preview-current nil)    ;; Disable current candidate preview
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-scroll-margin 5)        ;; Use scroll margin

  :config
  (global-corfu-mode)
  )
(use-package cargo)
(use-package cmake-mode)
(use-package toml-mode)
(use-package yaml-mode)
(use-package markdown-mode)
(use-package rustic)
(use-package lv)

(use-package eglot
    :bind
  (("C-." . eglot-code-actions))

  :config
  (add-to-list 'eglot-server-programs
               `((c++-mode) ,"clangd"))
  (add-to-list 'eglot-server-programs
               `((rustic-mode) ,"rust-analyzer"))
  (add-to-list 'eglot-server-programs
               '(python-mode . ("jedi-language-server")))
  ;; (add-to-list 'eglot-server-programs
  ;;              '(python-mode . ("pyright-langserver" "--stdio")))
  (add-hook 'python-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-hook 'rustic-mode-hook 'eglot-ensure)
  )

(use-package eldoc-box)
(use-package jinja2-mode)
(use-package git-link)
(use-package xterm-color)
(use-package vterm)
(use-package multi-vterm)
(use-package scad-mode)
(use-package forge :after magit)
(use-package github-review :after forge)
(use-package tree-sitter)
(use-package tree-sitter-langs
  :after tree-sitter
  :init
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  )
(use-package realgud)
(electric-pair-mode 1)
(use-package deadgrep)
(use-package rg)
(use-package expand-region
  :bind ("C-M-SPC" . er/expand-region))

(use-package gdb-mi
  :straight (:host github :repo "weirdNox/emacs-gdb" :files ("*.el" "*.c" "*.h" "Makefile"))
  :init
  (fmakunbound 'gdb)
  (fmakunbound 'gdb-enable-debug))

; rainbow delimiters is incompatible with tree-sitter for now
;(use-package rainbow-delimiters
;  :init
;  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
;)

; add my library set
(add-to-list 'load-path "~/.emacs.lib")

; turn on major features 
;(counsel-mode 1)
(yas-global-mode 1)
(server-start)

; require things that aren't in use package
(require 'generic-x)
(require 'notifications)
(require 'subr-x)
(require 'smart-split)
(require 'wait-gdb)
(require 'compile-notifications)
(require 'ansi-color-buffer)
(require 'bazel-mode)
(load-file "~/.emacs.lib/org-roam-logseq.el")

; basic settings that keep me sane
(add-to-list 'default-frame-alist '(background-color . "black"))
(add-to-list 'default-frame-alist '(foreground-color . "lightgrey"))
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(add-to-list 'default-frame-alist '(font . "Inconsolata-10"))
(setq column-number-mode t)
(setq line-number-mode t)
(setq mouse-yank-at-point t)
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(global-font-lock-mode)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq-default display-buffer-reuse-frames t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq truncate-partial-width-windows nil)
(setq c-basic-offset 4)
(setq tab-width 4)
(show-paren-mode)
(transient-mark-mode t)
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
(global-so-long-mode)
(pixel-scroll-precision-mode)

; file associations
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

; Global keybindings
(global-set-key [(control tab)] 'other-window)
(global-set-key [(control shift tab)] 'other-frame)
;(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-s") 'isearch-repeat-forward)
(global-set-key [(control /)] 'projectile-compile-project)
(global-set-key (kbd "C-c p") 'projectile-command-map)
;(global-set-key (kbd "C-x b") 'counsel-switch-buffer)
;(global-set-key (kbd "M-x") 'counsel-M-x)
;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key [(control =)] 'copy-region-as-kill)
(global-unset-key [(meta g)])
(global-set-key [(meta g)] 'goto-line)


; Turn off magit features that make me insane
(with-eval-after-load 'magit-mode
  (define-key magit-mode-map [(control tab)] 'other-window))
(setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)

; projectile settings
                                        ;(setq projectile-completion-system 'ivy)
;(counsel-projectile-mode)
(setq projectile-sort-order 'recentf)

; C/C++ settings
(defconst my-cc-style
  '("gnu"
    (c-offsets-alist . ((innamespace [0])
			(inextern-lang .[0])
			(arglist-intro . [6])))))
(c-add-style "my-cc-style" my-cc-style)
(add-hook 'c++-mode-hook
	  '(lambda ()
	    (c-set-style "my-cc-style")
	    (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)
            ))

(add-hook 'c-mode-hook
	  '(lambda ()
	    (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)
            (eldoc-box-hover-mode)))

(add-hook 'python-mode-hook
          '(lambda()
            (setq python-indent-offset 4)
            (eldoc-box-hover-mode)))

; clang format
(require 'clang-format)
(global-set-key (kbd "C-c i") 'clang-format-region)
(global-set-key (kbd "C-c u") 'clang-format-buffer)

(setq clang-format-executable "clang-format")
(defun clang-format-before-save ()
  "Add this to .emacs to clang-format on save
 (add-hook 'before-save-hook 'clang-format-before-save)."
 
 
  (interactive)
  (when (eq major-mode 'c++-mode) (clang-format-buffer)))
 
 
; Install hook to use clang-format on save
;(add-hook 'before-save-hook 'clang-format-before-save)

(defun projectile-proj-find-function (dir)
  (let ((root (projectile-project-root dir)))
    (and root (cons 'transient root))))

;(setq company-backends
;      (cons 'company-capf
;            (remove 'company-capf company-backends)))
(with-eval-after-load 'project
  (add-to-list 'project-find-functions
               'projectile-proj-find-function))

(setq rust-format-on-save t)
(setq rustic-lsp-client 'eglot)

; compilation-mode tweaks
(compile-notifications)
;(setq compilation-environment '("TERM=eterm-color"))
;(defun my/advice-compilation-filter (f proc string)
;  (funcall f proc (xterm-color-filter string)))
;(advice-add 'compilation-filter :around #'my/advice-compilation-filter)
;(setq xterm-color-use-bold-for-bright t)

; load local environment
(if (file-exists-p "~/.emacs.local")
    (add-to-list 'load-path "~/.emacs.local"))

(if (file-exists-p "~/.emacs.local/local-init.el")
     (load-file "~/.emacs.local/local-init.el"))
(if (file-exists-p "~/.emacs.local/local-init.el")
     (local-init))

; split all the frames
(dolist (this-frame (frame-list))
  (select-frame this-frame)
  (smart-split))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages nil)
 '(safe-local-variable-values
   '((projectile-project-compilation-cmd . "bazel build //ros/src/planning_stack/...")))
 '(visible-bell t)
 '(warning-suppress-log-types '((comp) (comp)))
 '(warning-suppress-types '((comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
