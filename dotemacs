(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")

(el-get-bundle clang-format)
(el-get-bundle magit)
(el-get-bundle rust-mode)
(el-get-bundle projectile)
(el-get-bundle ivy)
(el-get-bundle counsel)
(el-get-bundle swiper)
(el-get-bundle company)
(el-get-bundle flycheck)
(el-get-bundle racer)
(el-get-bundle cargo)
(el-get-bundle flycheck-rust)
(el-get-bundle bazel-mode)
(el-get-bundle cmake-mode)
(el-get-bundle toml-mode)
(el-get-bundle yaml-mode)
(el-get-bundle markdown-mode)
(el-get-bundle spinner)
(el-get-bundle lv)
(el-get-bundle lsp-mode)
(el-get-bundle company-lsp)
(el-get-bundle lsp-ui)
(el-get-bundle dap-mode
  :url "https://github.com/emacs-lsp/dap-mode.git")
(el-get 'sync)

(package-initialize)

(counsel-mode 1)

(add-to-list 'load-path "~/.emacs.lib")

(require 'tramp)
(require 'generic-x)
(require 'notifications)
(require 'subr-x)
(require 'smart-split)

(add-to-list 'default-frame-alist '(background-color . "black"))
(add-to-list 'default-frame-alist '(foreground-color . "grey"))
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))

(if (file-exists-p "~/.elisp/setup-frames.el")
    (
     (load "~/.elisp/setup-frames.el")
     (setup-frames)))

(set-default-font "Inconsolata-10")

(setq column-number-mode t)
(setq line-number-mode t)
(setq mouse-yank-at-point t)
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
(global-font-lock-mode)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq-default display-buffer-reuse-frames t)

(add-to-list 'auto-mode-alist '("\\.bzl$" . bazel-mode))
(add-to-list 'auto-mode-alist '("BUILD$" . bazel-mode))
(add-to-list 'auto-mode-alist '("dotemacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.template$" . jinja2-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))

(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq truncate-partial-width-windows nil)

(setq c-basic-offset 4)
(server-start)
(global-font-lock-mode)
(global-set-key [(control tab)] 'other-window)
(global-set-key [(control shift tab)] 'other-frame)
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key [(control /)] 'counsel-compile)
(global-set-key (kbd "C-x b") 'counsel-switch-buffer)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key [(control =)] 'copy-region-as-kill)
(show-paren-mode)
(transient-mark-mode t)



(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(defconst my-cc-style
  '("gnu"
    (c-offsets-alist . ((innamespace [0])
			(inextern-lang .[0])
			(arglist-intro . [6])))))
(c-add-style "my-cc-style" my-cc-style)
(add-hook 'c++-mode-hook
	  '(lambda ()
	     (c-set-style "my-cc-style")
	     (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)))

(add-hook 'c-mode-hook
	  '(lambda ()
	     (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)))

(require 'lsp)
(require 'lsp-clients)
(add-hook 'c++-mode-hook #'lsp-deferred)
(add-hook 'c-mode-hook #'lsp-deferred)


(setq racer-cmd "~/.cargo/bin/racer") ;; Rustup binaries PATH
(setq racer-rust-src-path "~/work/rust/src")
(add-hook 'rust-mode-hook #'racer-mode)
(add-hook 'racer-mode-hook #'eldoc-mode)
(add-hook 'racer-mode-hook #'company-mode)
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

(global-unset-key [(meta g)])
(global-set-key [(meta g)] 'goto-line)

(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))

;(require 'clang-format)
;(global-set-key (kbd "C-c i") 'clang-format-region)
;(global-set-key (kbd "C-c u") 'clang-format-buffer)

;(setq clang-format-executable "/usr/local/bin/clang-format")
;(defun clang-format-before-save ()
;  "Add this to .emacs to clang-format on save
; (add-hook 'before-save-hook 'clang-format-before-save)."
 
 
;  (interactive)
;  (when (eq major-mode 'c++-mode) (clang-format-buffer)))
 
 
;; Install hook to use clang-format on save
;(add-hook 'before-save-hook 'clang-format-before-save)

(dolist (this-frame (frame-list))
  (select-frame this-frame)
  (smart-split))

(add-hook 'focus-in-hook '(lambda ()
			    (setq frame-has-focus 1)))
(add-hook 'focus-out-hook '(lambda ()
			    (setq frame-has-focus nil)))

(defun my-compilation-finish-function (buffer desc)
  (if (string-match "^finished" desc)
      (setq notify-msg "Compilation finished")
    (setq notify-msg (concat "Compilation failed: " (string-trim desc)))
    )
  (if frame-has-focus
      (message notify-msg)
    (notifications-notify :title notify-msg)))

(add-hook 'compilation-finish-functions 'my-compilation-finish-function)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (use-package slack websocket request oauth2 emojify circe alert yaml-mode jinja2-mode bazel-mode flycheck-irony company-irony company-irony-c-headers company magit))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
