; package management - use straight.el and use-package
(package-initialize)
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
(setq use-package-always-ensure t)

(defun native-comp-available-p () nil)

; fix for some incompatibility with tramp and straight.el
(autoload #'tramp-register-crypt-file-name-handler "tramp-crypt")
(use-package tramp)
(use-package org
  :init
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (setq org-agenda-files '("/ssh:sadusk.com:~/org"))
  )
(use-package org-roam
  :init
  (setq org-roam-v2-ack t)
  (setq org-roam-directory "/ssh:sadusk.com:~/org-roam")
  (org-roam-db-autosync-mode)
  )

(use-package project)
(use-package bui)
(use-package posframe)
(use-package avy)
(use-package ivy)
(use-package swiper)
(use-package clang-format)
(use-package magit)
(use-package yasnippet)
(use-package projectile)
(use-package counsel)
(use-package counsel-projectile)
(use-package company)
(use-package flycheck)
(use-package flycheck-rust)
(use-package cargo)
(use-package cmake-mode)
(use-package toml-mode)
(use-package yaml-mode)
(use-package markdown-mode)
(use-package rustic)
(use-package lv)
(use-package lsp-mode)
(use-package lsp-ui)
(use-package lsp-treemacs)
(use-package dap-mode
  :straight (dap-mode :type git :host github :repo "emacs-lsp/dap-mode"))
(use-package jinja2-mode)
(use-package git-link)
(use-package xterm-color)
(use-package all-the-icons-ivy-rich
  :init (all-the-icons-ivy-rich-mode 1))
(use-package ivy-rich
  :init
  (ivy-rich-mode 1)
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  )
(use-package scad-mode)

; add my library set
(add-to-list 'load-path "~/.emacs.lib")

; turn on major features 
(counsel-mode 1)
(yas-global-mode 1)
(server-start)

; require things that aren't in use package
(require 'generic-x)
(require 'notifications)
(require 'subr-x)
(require 'smart-split)
(require 'wait-gdb)
(require 'compile-notifications)
(require 'ansi-color-buffer)
(require 'bazel-mode)
(require 'org)

; basic settings that keep me sane
(add-to-list 'default-frame-alist '(background-color . "black"))
(add-to-list 'default-frame-alist '(foreground-color . "grey"))
(add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
(setq column-number-mode t)
(setq line-number-mode t)
(setq mouse-yank-at-point t)
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)
(global-font-lock-mode)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(setq-default display-buffer-reuse-frames t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(setq truncate-partial-width-windows nil)
(setq c-basic-offset 4)
(setq tab-width 4)
(show-paren-mode)
(transient-mark-mode t)
(if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
(global-so-long-mode)

; file associations
(add-to-list 'auto-mode-alist '("\\.bzl$" . bazel-mode))
(add-to-list 'auto-mode-alist '("BUILD$" . bazel-mode))
(add-to-list 'auto-mode-alist '("dotemacs$" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.template$" . jinja2-mode))
(add-to-list 'auto-mode-alist '("\\.j2$" . jinja2-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.inl\\'" . c++-mode))

; Global keybindings
(global-set-key [(control tab)] 'other-window)
(global-set-key [(control shift tab)] 'other-frame)
(global-set-key (kbd "C-s") 'swiper-isearch)
(global-set-key (kbd "M-s") 'isearch-repeat-forward)
(global-set-key [(control /)] 'projectile-compile-project)
(global-set-key (kbd "C-x b") 'counsel-switch-buffer)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
(global-set-key [(control =)] 'copy-region-as-kill)
(global-unset-key [(meta g)])
(global-set-key [(meta g)] 'goto-line)


; Turn off magit features that make me insane
(with-eval-after-load 'magit-mode
  (define-key magit-mode-map [(control tab)] 'other-window))
(setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)

; projectile settings
(setq projectile-completion-system 'ivy)
(counsel-projectile-mode)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(setq projectile-sort-order 'recentf)

; C/C++ settings
(defconst my-cc-style
  '("gnu"
    (c-offsets-alist . ((innamespace [0])
			(inextern-lang .[0])
			(arglist-intro . [6])))))
(c-add-style "my-cc-style" my-cc-style)
(add-hook 'c++-mode-hook
	  '(lambda ()
	     (c-set-style "my-cc-style")
	     (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)))

(add-hook 'c-mode-hook
	  '(lambda ()
	     (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)))

; clang format
(require 'clang-format)
(global-set-key (kbd "C-c i") 'clang-format-region)
(global-set-key (kbd "C-c u") 'clang-format-buffer)

(setq clang-format-executable "clang-format")
(defun clang-format-before-save ()
  "Add this to .emacs to clang-format on save
 (add-hook 'before-save-hook 'clang-format-before-save)."
 
 
  (interactive)
  (when (eq major-mode 'c++-mode) (clang-format-buffer)))
 
 
; Install hook to use clang-format on save
(add-hook 'before-save-hook 'clang-format-before-save)

; lsp settings
(require 'lsp)
(add-hook 'c++-mode-hook #'lsp-deferred)
(add-hook 'c-mode-hook #'lsp-deferred)
(setq clangd-remote-command '("clangd-12" "-j=8" "--background-index" "--compile-commands-dir=."))

; lsp over tramp
(setq auto-revert-remote-files nil)
(lsp-register-client
 (make-lsp-client :new-connection (lsp-tramp-connection clangd-remote-command)
                  :major-modes '(c-mode c++-mode)
                  :remote? t
                  :server-id 'clangd-remote))

; uncomment to debug lsp
;(setq lsp-enable-file-watchers nil)
;(setq lsp-log-io t)

; rust settings
(setq lsp-rust-server 'rls)

(add-hook 'rust-mode-hook #'lsp-deferred)
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

(setq rust-format-on-save t)

; compilation-mode tweaks
(compile-notifications)
(setq compilation-environment '("TERM=eterm-color"))
(defun my/advice-compilation-filter (f proc string)
  (funcall f proc (xterm-color-filter string)))
(advice-add 'compilation-filter :around #'my/advice-compilation-filter)
(setq xterm-color-use-bold-for-bright t)

; load local environment
(if (file-exists-p "~/.emacs.local")
    (add-to-list 'load-path "~/.emacs.local"))

(if (file-exists-p "~/.emacs.local/local-init.el")
     (load-file "~/.emacs.local/local-init.el"))
(if (file-exists-p "~/.emacs.local/local-init.el")
     (local-init))

; split all the frames
(dolist (this-frame (frame-list))
  (select-frame this-frame)
  (smart-split))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(lsp-rust-server 'rust-analyzer)
 '(package-selected-packages nil)
 '(safe-local-variable-values
   '((projectile-project-compilation-cmd . "bazel build //ros/src/planning_stack/...")))
 '(warning-suppress-log-types '((comp) (comp)))
 '(warning-suppress-types '((comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
