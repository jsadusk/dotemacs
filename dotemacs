;-*- lisp -*-
; package management - use straight.el and use-package
(let ((home-dir (getenv "HOME")))
  (dolist (newpath '("~/.local/bin" "~/.cargo/bin/rust-analyzer" "~/bin" "~/.cargo/bin/" "/usr/local/bin"))
  (setenv "PATH" (concat (getenv "PATH") ":" (string-replace "~" home-dir newpath)))
  (setq exec-path (append exec-path '(newpath)))
  ))

(setq package-enable-at-startup nil)

(defvar elpaca-installer-version 0.10)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
 ;; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)
(use-package diminish
    :ensure t
    :config
    (diminish 'eldoc-mode)
    )

(use-package gcmh
    :diminish gcmh-mode
    :config
  (gcmh-mode 1))

(elpaca-wait)

(use-package tramp
    :ensure nil
    :config
  (setq tramp-verbose 0)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
  (setq tramp-backup-directory-alist nil)
  (setq tramp-auto-save-directory "~/.emacs.d/tramp-autosave")
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (add-to-list 'tramp-remote-path "~/.local/bin/")
  (add-to-list 'tramp-remote-path "~/.cargo/bin/")
  (add-to-list 'tramp-remote-path "~/bin/")
  (setq tramp-ssh-controlmaster-options nil)
  (setq vc-handled-backends '())
  (setq vc-ignore-dir-regexp ".+")
  (setq remote-file-name-inhibit-locks t)
  (setq vc-follow-symlinks t)
  )
(use-package emacs
    :ensure nil
    :bind
    (
     ("C-<tab>" . other-window)
     ("C-M-<tab>" . other-frame)
     ("C-/" . projectile-compile-project)
     ("C-c p" . projectile-command-map)
     ("C-=" . copy-region-as-kill)
     ("M-g" . goto-line)
     )
    
    :config
    (setq custom-file (concat user-emacs-directory "custom.el"))

    (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
    (add-to-list 'major-mode-remap-alist '(cmake-mode . cmake-ts-mode))
    (add-to-list 'major-mode-remap-alist '(bash-mode . bash-ts-mode))
    (add-to-list 'major-mode-remap-alist '(java-mode . java-ts-mode))
    (add-to-list 'major-mode-remap-alist '(go-mode . go-ts-mode))
    (add-to-list 'major-mode-remap-alist '(js-mode . js-ts-mode))
    (add-to-list 'major-mode-remap-alist '(toml-mode . toml-ts-mode))
    (add-to-list 'major-mode-remap-alist '(js-json-mode . json-ts-mode))
    (add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode))
    (add-to-list 'default-frame-alist '(background-color . "black"))
    (add-to-list 'default-frame-alist '(foreground-color . "lightgrey"))
    (add-to-list 'default-frame-alist '(vertical-scroll-bars . nil))
    (add-to-list 'default-frame-alist '(font . "Inconsolata-10"))
    (setq column-number-mode t)
    (setq line-number-mode t)
    (setq mouse-yank-at-point t)
    (setq indent-tabs-mode nil)
    (setq-default indent-tabs-mode nil)
    (global-font-lock-mode)
    (menu-bar-mode -1)
    (toggle-scroll-bar -1)
    (tool-bar-mode -1)
    (setq-default display-buffer-reuse-frames t)
    (setq truncate-partial-width-windows nil)
    (setq c-basic-offset 4)
    (setq tab-width 4)
    (show-paren-mode)
    (setq show-trailing_whitespace t)
    (transient-mark-mode t)
    (if (fboundp 'blink-cursor-mode) (blink-cursor-mode 0))
    (global-so-long-mode)
    (pixel-scroll-precision-mode)
    (when (eq system-type 'darwin)
      (setq visible-bell nil)
      (setq ring-bell-function 'ignore)
      (setq mac-option-key-is-meta nil)
      (setq mac-command-key-is-meta t)
      (setq mac-command-modifier 'meta)
      (setq mac-option-modifier 'super)
      (add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
      )
    (savehist-mode)
    (server-start)
    )

(use-package treesit-auto
  :custom
  (treesit-auto-install 'prompt)
  :config
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))

(use-package org
  :init
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (setq org-agenda-window-setup 'current-window)
  (setq org-todo-keywords
        '((sequence "TODO" "WORKING" "BACKGROUND" "BLOCKED" "NEXT"
           "|"
           "DONE" "NOTDOING" "DELEGATED"))
        )
  )
(use-package dockerfile-mode)
(use-package org-roam
  :init
  (if (not (file-exists-p "~/roam"))
      (progn 
        (make-directory "~/roam")
        (make-directory "~/roam/journals")
        (make-directory "~/roam/pages")
        )
      )
  (org-roam-db-autosync-mode)
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/roam"))
  (org-roam-dailies-directory "journals/")
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(
     ("d" "default" plain "%?"
      :target (file+head "pages/${slug}.org"
                     "#+title: ${title}\n")
      :unnarrowed t)
     ("j" "job opportunity" plain
      "\n* Company\n\n-%?\n\n* History\n\n-\n\n* Job Notes\n\n-\n\n* Office\n\n-\n\n* Comp\n\n-\n\n* Next Steps\n\n-\n"
      :target (file+head "pages/job-${slug}.org"
               "#+title: ${title}\n")
      :unnarrowed t)
     ))
  :bind
  (;("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   :map org-mode-map
   ("C-M-i" . completion-at-point))
  :config
  (org-roam-setup)

  (defun roam-extra:todo-p ()
    "Return non-nil if current buffer has any TODO entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks."
    (org-element-map
        (org-element-parse-buffer 'headline)
        'headline
      (lambda (h)
        (eq (org-element-property :todo-type h)
            'todo))
      nil 'first-match))

  (defun roam-extra:update-todo-tag ()
    "Update TODO tag in the current buffer."
    (when (and (not (active-minibuffer-window))
               (eq major-mode 'org-mode))
      (let* ((file (buffer-file-name (buffer-base-buffer)))
             (all-tags (org-roam--extract-tags file))
             (prop-tags (org-roam--extract-tags-prop file))
             (tags prop-tags))
        (if (roam-extra:todo-p)
            (setq tags (seq-uniq (cons "todo" tags)))
            (setq tags (remove "todo" tags)))
        (unless (equal prop-tags tags)
          (org-roam--set-global-prop
           "roam_tags"
           (combine-and-quote-strings tags))))))

  (defun roam-extra:todo-files ()
    "Return a list of note files containing todo tag."
    (seq-map
     #'car
     (org-roam-db-query
      [:select file
      :from tags
      :where (like tags (quote "%\"todo\"%"))])))

  (defun roam-extra:update-todo-files (&rest _)
    "Update the value of `org-agenda-files'."
    (setq org-agenda-files (roam-extra:todo-files)))
  (add-hook 'org-roam-file-setup-hook #'roam-extra:update-todo-tag)
  (add-hook 'before-save-hook #'roam-extra:update-todo-tag)
  (advice-add 'org-agenda :before #'roam-extra:update-todo-files)
  )
(use-package consult-org-roam
   :ensure t
   :after org-roam
   :diminish consult-org-roam-mode
   :init
   (require 'consult-org-roam)
   ;; Activate the minor mode
   (consult-org-roam-mode 1)
   :custom
   ;; Use `ripgrep' for searching with `consult-org-roam-search'
   (consult-org-roam-grep-func #'consult-ripgrep)
   ;; Configure a custom narrow key for `consult-buffer'
   (consult-org-roam-buffer-narrow-key ?r)
   ;; Display org-roam buffers right after non-org-roam buffers
   ;; in consult-buffer (and not down at the bottom)
   (consult-org-roam-buffer-after-buffers t)
   :config
   ;; Eventually suppress previewing for certain functions
   (consult-customize
    consult-org-roam-forward-links
    :preview-key "M-.")
   :bind
   ;; Define some convenient keybindings as an addition
   ("C-c n f" . consult-org-roam-file-find)
   ("C-c n b" . consult-org-roam-backlinks)
   ("C-c n B" . consult-org-roam-backlinks-recursive)
   ("C-c n l" . consult-org-roam-forward-links)
   ("C-c n r" . consult-org-roam-search))

(use-package eat)

(use-package bui)
(use-package posframe)
(use-package vertico
     :init
     (vertico-mode))

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

(use-package consult
    :bind
  (
   ("C-s" . consult-line)
   ("C-x b" . consult-buffer)
   ("M-g" . consult-goto-line)
   ("M-y" . consult-yank-from-kill-ring)
   ("C-c m" . consult-imenu-multi)
   ))

(use-package marginalia
  :bind (("M-A" . marginalia-cycle)
         :map minibuffer-local-map
         ("M-A" . marginalia-cycle))

  :init
  (marginalia-mode))

(use-package embark
    :ensure t
    :after marginalia

  :bind
  (("C-," . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. You may adjust the
  ;; Eldoc strategy, if you want to see the documentation from
  ;; multiple providers. Beware that using this can be a little
  ;; jarring since the message shown in the minibuffer can be more
  ;; than one line, causing the modeline to move up and down:

  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :after embark
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))(use-package nerd-icons
    :after diminish
    :config
  )
(use-package nerd-icons-corfu
    :after nerd-icons corfu
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)
    )
(use-package nerd-icons-completion
    :after nerd-icons
    :config
    (nerd-icons-completion-mode)
    )

;; (use-package delight
;;     :ensure 't
;;     :after nerd-icons
;;     :config
;;     (delight 'python-mode (nerd-icons-icon-for-mode 'python-mode) :major)
;;     (delight "Python" (nerd-icons-icon-for-mode 'python-mode) :major)
;;     (delight 'python-ts-mode (nerd-icons-icon-for-mode 'python-mode) :major)
;;     )

(use-package clang-format
    :config
  (global-set-key (kbd "C-c i") 'clang-format-region)
  (global-set-key (kbd "C-c u") 'clang-format-buffer)
)
(use-package magit
    :config
  (define-key magit-mode-map [(control tab)] 'other-window)
  (setq magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  )

(use-package yasnippet
    :diminish yas-minor-mode
    :config
    (yas-global-mode))

(use-package projectile
    :diminish projectile-mode
    :config

    ;; This massively speeds up project discovery on tramp
    (defun projectile-root-git-or-existing (dir)
      "Retrieve the root directory of the project at DIR using the presence of a .git or an existing project"
      (let* (
             (abbreviated (abbreviate-file-name dir))
             (known (projectile-known-projects))
             (existing (seq-find
                        (lambda (project) (or (string= project abbreviated) (string-prefix-p project dir)))
                        known))
        )
        (if existing
            existing
            (locate-dominating-file dir ".git")
            )
        )
      )

    (setq projectile-project-root-functions '(projectile-root-git-or-existing))
    (setq projectile-indexing-method 'hybrid)
    (setq projectile-enable-caching t)
    (setq projectile-enable-caching 'persistent)
    (setq projectile-sort-order 'recentf)
    (projectile-global-mode)
    )
(use-package corfu

  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match t)      ;; Quit if there's no match
  (corfu-preselect 'prompt)      ;; Preselect the prompt
  (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-scroll-margin 5)        ;; Use scroll margin

  :config
  (global-corfu-mode)
  )
(use-package cargo)
(use-package cmake-mode)
(use-package toml-mode)
(use-package yaml-mode)
(use-package markdown-mode)
(use-package lv)
(use-package rust-mode
  :init
  (setq rust-mode-treesitter-derive t))

(use-package eglot
    :ensure nil
    :bind
    (("C-." . eglot-code-actions))

 :config
 (setq eglot-events-buffer-size 0)
 (fset #'jsonrpc--log-event #'ignore)
 (add-to-list 'eglot-server-programs
              `((c++-mode) ,"clangd"))
 (add-to-list 'eglot-server-programs
              `((rust-ts-mode) ,"rust-analyzer"))
 (add-to-list 'eglot-server-programs
              `((python-ts-mode) ,"pylsp_log"))

 (setq-default eglot-workspace-configuration
               '(:pylsp
                 (:plugins
                  (:jedi (:extra_paths ["waabi" "tools" "docs" "third_party"])
                   :jedi_completion
                   (:enabled t
                    :include_params t
                    :include_class_objects t
                    :include_function_objects t
                    :fuzzy t
                    :eager t
                    )
                   :jedi_hover (:enabled t)
                   :jedi_references (:enabled t)
                   :jedi_symbols (:enabled t)
                   :jedi_definition
                   (:enabled t
                    :follow_imports t
                    :follow_builtin_imports t
                    :follow_builtin_definitions t
                    )
                   :jedi_signature_help (:enabled t)
                   :ruff
                   (:enabled t
                    :formatEnabled t
                    :lineLength 120
                    )

                   ;; These plugins are useful but slow pylsp way down
                   ;:pylsp_mypy (:enabled t :dmypy t)
                   ;;pylsp_rope (:enabled t)
                   ;:rope_autoimport (:enabled t :code_actions (:enabled t))
                   )
                  )
               :rust-analyzer
                 (:rustfmt
                  (:overrideCommand "/home/waabi-user/.local/bin/rustfmt")
                  )
                 )
               )

 (setq-default eglot-code-action-indications '(-nearby))
 (defun eglot-format-if-managed ()
  (interactive)
  (if (member 'eglot--managed-mode local-minor-modes)
      (eglot-format-buffer)
      )
  )
 (add-hook 'before-save-hook 'eglot-format-if-managed)
  :hook (
         (python-ts-mode . eglot-ensure)
         (c++-mode . eglot-ensure)
         (rust-ts-mode . eglot-ensure)
         )
  )

(use-package flymake
    :ensure nil
    :diminish flymake-mode
    )

(use-package flymake-popon)
(use-package eldoc :ensure nil)
(use-package eldoc-box
    :diminish eldoc-box-hover-mode
    :after eldoc
    :custom-face
  :hook
  (
   (python-mode . eldoc-box-hover-mode)
   (c++-mode . eldoc-box-hover-mode)
   (rust-mode . eldoc-box-hover-mode)
   )
  )



(use-package breadcrumb)
(use-package jinja2-mode)
(use-package git-link)
(use-package eterm-256color)
(use-package vterm
    :after eterm-256color
    :custom
    (vterm-term-environment-variable "eterm-color")
    (add-to-list 'vterm-eval-cmds '("xp-notify" xp-notify))
    (vterm-max-scrollback 100000)
    )
(use-package multi-vterm)
(use-package scad-mode)
;(use-package forge :after magit)
;(use-package github-review :after forge)
(electric-pair-mode 1)
(use-package rg)
(use-package expand-region
  :bind ("C-M-SPC" . er/expand-region))
(use-package protobuf-mode)

(use-package dape
  :ensure (dape :type git :host github :repo "svaante/dape")
  ;; To use window configuration like gud (gdb-mi)
  :init
  (setq dape-buffer-window-arrangement 'gud)

  :config
  ;; Info buffers to the right
  ;; (setq dape-buffer-window-arrangement 'right)

  ;; To not display info and/or buffers on startup
  ;; (remove-hook 'dape-on-start-hooks 'dape-info)
  ;; (remove-hook 'dape-on-start-hooks 'dape-repl)

  ;; To display info and/or repl buffers on stopped
   (add-hook 'dape-on-stopped-hooks 'dape-info)
   (add-hook 'dape-on-stopped-hooks 'dape-repl)

  ;; By default dape uses gdb keybinding prefix
  ;; If you do not want to use any prefix, set it to nil.
  ;; (setq dape-key-prefix "\C-x\C-a")

  ;; Kill compile buffer on build success
  ;; (add-hook 'dape-compile-compile-hooks 'kill-buffer)

  ;; Save buffers on startup, useful for interpreted languages
  ;; (add-hook 'dape-on-start-hooks
  ;;           (defun dape--save-on-start ()
  ;;             (save-some-buffers t t)))

  ;; Projectile users
  (setq dape-cwd-fn 'projectile-project-root)
  )

(use-package bazel
    :ensure (bazel :type git :host github :repo "bazelbuild/emacs-bazel-mode")
    :config
    (defface cargo-error-code
        '((t :foreground "red"))
      "Face for cargo error codes"
      :group 'bazel
      )
    (defface cargo-error-message
        '((t :foreground "yellow"))
      "Face for cargo error messages"
      :group 'bazel
      )
    (defface cargo-error-explaination
        '((t :foreground "green"))
      "Face for cargo error explainations"
      :group 'bazel
      )
    (add-to-list 'compilation-error-regexp-alist '("^\\(error[^:]*\\): \\(.*\\)" nil nil nil 0 nil (1 'cargo-error-code) (2 'cargo-error-message)))
    (add-to-list 'compilation-error-regexp-alist '("^ *--> *\\([^:]*\\):\\([0-9]*\\):\\([0-9]*\\)" 1 2 3))

    )

(use-package smart-mode-line
    :init
  (setq sml/theme 'dark)
  (setq sml/no-confirm-load-theme t)
    :config
  (sml/setup)
  )

;; (use-package vertico-posframe
;;     :ensure t
;;     :after vertico
;;     :config
;;     (vertico-posframe-mode 1)
;;     (setq vertico-posframe-poshandler 'posframe-poshandler-window-bottom-left-corner)
;;     (setq vertico-posframe-width 103)
;;     )

;; Doesn't quite do what I want but an interesting example
;; (use-package maple-minibuffer
;;     :ensure (maple-minibuffer :type git
;;                               :host github
;;                               :repo "honmaple/emacs-maple-minibuffer")
;;     :hook (after-init . maple-minibuffer-mode)
;;     )

(use-package coterm
    :config
  (coterm-mode)
  )
(use-package fancy-compilation
    :commands (fancy-compilation-mode)
    :config
    (with-eval-after-load 'compile
      (fancy-compilation-mode))
    )
(use-package treemacs)

(use-package elysium
  :custom
  ;; Below are the default values
  (elysium-window-size 0.33) ; The elysium buffer will be 1/3 your screen
  (elysium-window-style 'vertical)) ; Can be customized to horizontal

(use-package gptel
  :config
  (setq
   gptel-backend (gptel-make-ollama "Ollama"
                   :host "localhost:11434"
                   :stream t
                   :models '(codestral:22b))))
(use-package smerge-mode
  :diminish smerge-mode
  :ensure nil
  :hook
  (prog-mode . smerge-mode))

(use-package aidermacs
    :ensure (:host github :repo "MatthewZMD/aidermacs" :files ("*.el"))
    :config
    (setq aidermacs-default-model "ollama_chat/codestral")
    (global-set-key (kbd "C-c a") 'aidermacs-transient-menu)
    )

(use-package visual-replace
    :ensure (visual-replace :type git :host github :repo "szermatt/visual-replace")
    )

(use-package hydra)

; add my library set
(add-to-list 'load-path "~/.emacs.lib")

(require 'smart-split)
(require 'compile-notifications)
(require 'ansi-color-buffer)

; file associations
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

; Global keybindings
;; (global-set-key [(control tab)] 'other-window)
;; (global-set-key [(control meta tab)] 'other-frame)
;; (global-set-key (kbd "M-s") 'isearch-repeat-forward)
;; (global-set-key [(control /)] 'projectile-compile-project)
;; (global-set-key (kbd "C-c p") 'projectile-command-map)
;; (global-set-key [(control =)] 'copy-region-as-kill)
;; (global-unset-key [(meta g)])
;; (global-set-key [(meta g)] 'goto-line)


; projectile settings
;(setq projectile-sort-order 'recentf)

; C/C++ settings
(defconst my-cc-style
  '("gnu"
    (c-offsets-alist . ((innamespace [0])
			(inextern-lang .[0])
			(arglist-intro . [6])))))
(c-add-style "my-cc-style" my-cc-style)
(add-hook 'c++-mode-hook
	  '(lambda ()
	    (c-set-style "my-cc-style")
	    (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)
            ))

(add-hook 'c--mode-hook
	  '(lambda ()
	    (setq tab-width 4 indent-tabs-mode nil c-basic-offset 4)
            (eldoc-box-hover-mode)))

(add-hook 'python-ts-mode-hook
          '(lambda()
            (setq python-indent-offset 4)
            (eldoc-box-hover-mode)))

 
;(setq rust-format-on-save t)

; compilation-mode tweaks
(compile-notifications)
;(setq compilation-environment '("TERM=eterm-color"))
;(defun my/advice-compilation-filter (f proc string)
;  (funcall f proc (xterm-color-filter string)))
;(advice-add 'compilation-filter :around #'my/advice-compilation-filter)
;(setq xterm-color-use-bold-for-bright t)


; load local environment
(if (file-exists-p "~/.emacs.local")
    (add-to-list 'load-path "~/.emacs.local"))

(if (file-exists-p "~/.emacs.local/local-init.el")
     (load-file "~/.emacs.local/local-init.el"))
(if (file-exists-p "~/.emacs.local/local-init.el")
     (local-init))

; split all the frames
(dolist (this-frame (frame-list))
  (select-frame this-frame)
  (smart-split))
